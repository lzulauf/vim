set nocompatible
filetype off
set rtp+=~/.vundle/vundle

call vundle#begin('$HOME/.vundle')

Plugin 'gmarik/vundle'

" Fancy status bar
Plugin 'Lokaltog/vim-powerline'

" For use with Unite
Plugin 'Shougo/neomru.vim'

" Quick jumping to file
Plugin 'Shougo/unite.vim'
Plugin 'Shougo/unite-outline'
Plugin 'Shougo/neoyank.vim'
Plugin 'thinca/vim-unite-history'
" Plugin 'osyo-manga/unite-quickfix'

" Run processes in the background
Plugin 'Shougo/vimproc.vim'

" Formatting
Plugin 'sbdchd/neoformat'


" Shows marks in a file
" Not compatible with neovim?

" Text Snippets
"Plugin 'UltiSnips'

" Crunch math plugin (requires selection)
Plugin 'arecarn/crunch'
Plugin 'arecarn/selection.vim'

" Visual representation of indentations
" To see timing:
" :syntime on
" browse file
" :syntime report
Plugin 'Yggdroot/indentLine'
let g:indentLine_faster = 1

" Quickly jump to alternate file
"Plugin 'a.vim'

" Solarized color scheme
" colorscheme solarized
Plugin 'altercation/vim-colors-solarized'
" colorscheme NeoSolarized
Plugin 'iCyMind/NeoSolarized'

" camelcase motion
Plugin 'camelcasemotion'

" CSV file handling
Plugin 'chrisbra/csv.vim'

" Time lapse view of commits for file
" Plugin 'git-time-lapse'

" Quickly jump to files
" Requires ruby installed at same version vim compiled against (Don't feel like dealing with this right now)
"Plugin 'git://git.wincent.com/command-t.git'

" Special snipmate branch that's maintained
" vim-addon-mw-utils and tlib_vim are both required by vim-snipmate
" Plugin 'MarcWeber/vim-addon-mw-utils'
" Plugin 'tomtom/tlib_vim'
" Plugin 'garbas/vim-snipmate'

" Undo tree visualization
Plugin 'Gundo'
nnoremap <F5> :GundoToggle<CR>

" Diff two blocks of lines
Plugin 'linediff.vim'

" Show status of lines from version control
" Plugin 'mhinz/vim-signify'

" Integration of ack (needed for ag)
" Plugin 'mileszs/ack.vim'

" Rainbow parens
Plugin 'luochen1990/rainbow'
let g:rainbow_active=1

" Plugin 'tomtom/quickfixsigns_vim'
" "let g:quickfixsigns_classes = ['qfl', 'loc', 'marks', 'vcsdiff', 'breakpoints']
" let g:quickfixsigns_classes = ['qfl', 'loc', 'marks', 'breakpoints']

" Plugin "michaeljsmith/vim-indent-object"

" Multiple Cursors
Plugin 'terryma/vim-multiple-cursors'
" " Make C-n default to match whole words, (and make g<C-n> match non-word boundaries)
let g:multi_cursor_start_key='g<C-n>'
let g:multi_cursor_start_word_key='<C-n>'
" " Allow normal mode leader keys to work (such as camelCaseMotion and delete motions)
let g:multi_cursor_normal_maps={',':1, 'd':1, 'g':1}

" Might be slow?
" Plugin 'w0rp/ale'

"Plugin 'MultipleSearch'
"Plugin 'recover.vim'
Plugin 'scrooloose/nerdcommenter'
"Plugin 'sjl/splice.vim'
"Plugin 'snipMate'
"Plugin 'Tagbar'
"Plugin 'taglist.vim'
"Plugin 'terryma/vim-expand-region'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-obsession'
"Plugin 'tpope/vim-pathogen'
if has('nvim')
  Plugin 'Valloric/YouCompleteMe'
  " Plugin 'Shougo/deoplete.nvim'
  " Plugin 'zchee/deoplete-jedi'
else
  Plugin 'Valloric/YouCompleteMe'
endif
"Plugin 'vim-indent-object'
Plugin 'vimwiki'

call vundle#end()
filetype plugin on
